import argparse
import logging
import pathlib
import datetime

from ruamel.yaml import YAML

import pwnlib.log

log = logging.getLogger("pwntest::build_action")
log.setLevel(logging.DEBUG)


class ActionBuilder:
    def __init__(self, manifest_file):
        self.manifest_file = manifest_file
        self.file_path = ".github/workflows/pwntest.yml"
        self.backup_file_path = ".github/workflows/pwntest.yml.bak"

    def save_old_action(self):
        with open(self.file_path, "rb") as f:
            with open(self.backup_file_path, "wb") as b:
                b.write(f.read())

    def get_challenge_objects(self):#
        yaml = YAML()
        yaml.indent(mapping=2, sequence=4, offset=2)
        yaml.preserve_quotes = True

        with open(self.manifest_file, "r") as f:
            manifest = yaml.load(f)

        manifest.yaml_set_start_comment(f"This file is automatically generated by pwntest on {datetime.datetime.now()}")

        for key in manifest:
            log.debug("Item: %s", key)
            item = manifest.get(key)




        pass



def build_action():
    pass


def parse_manifest():
    pass


def main(args):
    mapper = ActionBuilder(args["manifest"])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog='build_action',
        description='Build a GitHub action from a YML manifest',
        epilog='Text at the bottom of help')

    parser.add_argument("-m", '--manifest', type=str, help='The manifest file to build the github action from')

    args = parser.parse_args()
    main(args)